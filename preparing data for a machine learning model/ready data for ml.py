# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y5ItpcwMbigwTfsiTGoWS2mVyBTsSvIa
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from datetime import datetime,time,date

df=pd.read_csv('/content/real_estate_data (2).csv',sep='\t')
df.head()

df.info()
df.describe()

print(df.isnull().sum())

"""поля parks_around, parks_nearest, ponds_around и ponds_nearest необходимо проверить. Много незаполненных."""

pd.DataFrame(df.isnull().mean().round(4)*100).sort_values(by=0)[::-1].style.background_gradient('coolwarm')

df.rename(columns={'cityCenters_nearest':'city_centers_nearest'},inplace=True)
df.drop_duplicates()

df_f_p = df[['total_images',
                             'last_price',
                             'total_area',
                             'first_day_exposition',
                             'rooms',
                             'ceiling_height',
                             'floors_total',
                             'living_area',
                             'floor',
                             'is_apartment',
                             'studio',
                             'open_plan',
                             'kitchen_area',
                             'balcony',
                             'locality_name',
                             'city_centers_nearest',
                             'days_exposition']]
df_p_p = df[['last_price',
                              'floors_total',
                              'locality_name',
                              'airports_nearest',
                              'city_centers_nearest',
                              'parks_around3000',
                              'parks_nearest',
                              'ponds_around3000',
                              'ponds_nearest']]
df_f_p.head(10)

print(df_f_p.total_images.unique())
df_f_p.total_images.value_counts(ascending=False)

"""Необходимо проверить кол-во изображений 0.
Количество изображений в переделах нормального, есть несколько моментов, (кол-во изображений 1,2,3) на которые необходимо обратить внимание.

"""

df_f_p.loc[df_f_p['total_images']==0].head(10)



sns.histplot(df_f_p['last_price'])

len(df_f_p[df_f_p['last_price']==0])

df_f_p['last_price']=df_f_p['last_price']/1000000

sns.histplot(df_f_p['last_price'])

ax=df_f_p['last_price'].plot(kind='kde',figsize=(15,10))
ax.set_xlim(0,100)

ax=df_f_p['last_price'].plot(kind='box',figsize=(5,12))

"""отсекаем last_price до 100"""

ax=df_f_p.sort_values('total_area').plot(x='last_price',y='total_area',kind='scatter',figsize=(10,5))
ax.set_xlim(0,75)

Разброс по отсечке 75

df_f_p=df_f_p[df_f_p['last_price']<=75]

"""<div class="alert alert-info" style="border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid "> Не обратил внимания на это изначально. Сложно подстраивать по другим параметрам и не особо обоснованно,просто отфильтровал эти значения далее исходя из условия,так как их мало. </div>

## total_area1

> total_area

```df_f_p```
"""

ax=df_f_p['total_area'].plot(kind='box',figsize=(5,15),grid=True,title='Total Area Box Plot')

df_f_p=df_f_p[df_f_p['total_area']<=250]

ax=df_f_p['total_area'].plot(kind='box',figsize=(5,15),grid=True,title='Total Area Box Plot up 250')

ax=df_f_p['total_area'].plot(kind='hist',figsize=(15,10))
#ax.set_xlim(0,100)

sns.violinplot(y=df_f_p['total_area'])

df.head(3)

df_f_p['first_day_exposition']=pd.to_datetime(df_f_p['first_day_exposition'],format='Y-m-d')
df.head(3)

df_f_p['rooms'].value_counts()

df_f_p=df_f_p.query('rooms<=7')

df_f_p['ceiling_height'].isnull().sum()

df_f_p.pivot_table(values='ceiling_height', aggfunc=['mean','median'],index='locality_name')

df_f_p['ceiling_height']=df_f_p['ceiling_height'].fillna(df_f_p.groupby('locality_name')['ceiling_height'].transform('median'))

df_f_p['ceiling_height'].isnull().sum()

ax=df_f_p['ceiling_height'].plot(kind='box',figsize=[5,10])

df_f_p['ceiling_height'].describe()

len(df_f_p[df_f_p['ceiling_height']<=2])

df_f_p=df_f_p[df_f_p['ceiling_height']>=2]
df_f_p=df_f_p[df_f_p['ceiling_height']<=4]

df_f_p['ceiling_height'].isnull().sum()

df_f_p['floors_total'].isnull().sum()

df_f_p['floors_total'].describe()

ax=df_f_p['floors_total'].plot(kind='kde',figsize=[5,10])

df_f_p=df_f_p[df_f_p['floors_total']<=30]

df_f_p['living_area'].describe()

df_f_p['living_area'].isnull().sum()

ax=df_f_p['living_area'].plot(kind='box',figsize=[5,10])

df_f_p.pivot_table(values='living_area', aggfunc=['mean','median'],index='rooms')

df_f_p['living_area']=df_f_p['living_area'].fillna(df_f_p.groupby('rooms')['living_area'].transform('median'))

df_f_p['living_area'].describe()

ax=df_f_p['living_area'].plot(kind='hist',figsize=[5,10])
ax.set_xlim(0,100)

df_f_p=df_f_p[df_f_p['living_area']>=10]

ax=df_f_p['living_area'].plot(kind='hist',figsize=[5,10])
ax.set_xlim(0,100)

df_f_p['living_area'].isnull().sum()

df_f_p['floor'].describe()

df_f_p['floor'].isnull().sum()

df_f_p['is_apartment'].value_counts()

df_f_p.loc[df_f_p['is_apartment'].isnull()==True,'is_apartment']=0

df_f_p.head(10)

df_f_p['is_apartment'].isnull().sum()

print(df_f_p['is_apartment'])

df_f_p['studio'].value_counts()

df_f_p.loc[df_f_p['studio'].isnull()==True,'studio']=1

df_f_p['studio'].isnull().sum()

print(df_f_p['studio'])

df_f_p['open_plan'].value_counts()

print(df_f_p['open_plan'])

df_f_p.loc[df_f_p['open_plan'].isnull()==True,'open_plan']=1

"""Поля is_apartment, studio, open_plan удалить?"""

df_f_p['kitchen_area'].describe()

df_f_p['kitchen_area'].isnull().sum()

ax=df_f_p['kitchen_area'].plot(kind='kde',figsize=[5,10])

ax=df_f_p['kitchen_area'].plot(kind='box',figsize=[5,10])

len(df_f_p[df_f_p['kitchen_area']>=40])

df_f_p=df_f_p[df_f_p['kitchen_area']<=40]

ax=df_f_p['kitchen_area'].plot(kind='box',figsize=[5,10])

ax=df_f_p['kitchen_area'].plot(kind='kde',figsize=[5,10])

df_f_p.pivot_table(values='kitchen_area', aggfunc=['mean','median'],index='total_area')

df_f_p['kitchen_area']=df_f_p['kitchen_area'].fillna(df_f_p.groupby('total_area')['kitchen_area'].transform('median'))

df_f_p['kitchen_area'].isnull().sum()

df_f_p['balcony'].describe()

df_f_p['balcony'].head(20)

df_f_p.loc[df_f_p['balcony'].isnull()==True,'balcony']=0
df_f_p['balcony'].head(20)

sns.countplot(df_f_p['balcony']);

df_f_p['balcony'].value_counts()

df_f_p=df_f_p[df_f_p['balcony']<=2]

df_f_p['balcony'].value_counts()

df_f_p['locality_name'].isnull().sum()

df_f_p=df_f_p[df_f_p['locality_name'].isnull()==False]

df_f_p['city_centers_nearest'].describe()

df_f_p['city_centers_nearest'].head(10)

df_f_p.loc[df_f_p['city_centers_nearest'].isnull()==True,'city_centers_nearest']=0

df_f_p['city_centers_nearest'].isnull().sum()

df_f_p['days_exposition'].describe()

df_f_p['days_exposition'].isnull().sum()

df_f_p.corr()

plt.figure(figsize=(15,10))
sns.heatmap(df_f_p.corr(),annot=True,linewidths=2,cmap='coolwarm')

!pip install pandas-profiling

import pandas_profiling
from pandas_profiling import ProfileReport

profile=ProfileReport(df)
profile

sns.set(rc={'figure.figsize':(11.7,8.27)})

df_f_p=df_f_p.drop('days_exposition',axis=1)

df_f_p1=df_f_p

def apartment_floor(df_f_p1):
  if df_f_p1['floor']==1:
    return 'first'
  elif (df_f_p1['floor']==df_f_p1['floors_total']) or (df_f_p1['floors_total'])==1:
    return 'last'
  return 'other'

df_f_p1['apartement_floor']=df_f_p1.apply(apartment_floor, axis=1)

df_f_p1['apartement_floor'].value_counts()

ax=df_f_p.plot(y='last_price',x='floors_total',kind='box',figsize=(10,5))
ax.set_ylabel('last_price')
ax.set_xlabel('floors_total')

ax.hist(df_f_p['floor'],df_f_p['total_area'])